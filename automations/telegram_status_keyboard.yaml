
#############################
### Start Inline Keyboard ###
#############################
- id: telegram-control-pannel-start
  alias: 'Telegram Control Pannel Command'
  initial_state: 'on'
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/cp'
  action:
  - service: notify.telegram
    data:
      message: Control Panel
      data:
        inline_keyboard:
          - "Temp:/temp, Freezer:/freezer, Ping:/ping, Light:/light, Status:/status"


####################
### IK Ping Pong ###
####################
- id: telegram-ik-ping-pong
  alias: 'telegram ping pong'
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/ping'
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: >-
          Callback received from {{ trigger.event.data.from_first }}.
          Message id: {{ trigger.event.data.message.message_id }}.
          Data: {{ trigger.event.data.data }}
          {{now().strftime("%H:%M:%S %Y-%m-%d")}} Pong, Message from {{ trigger.event.data["user_id"] }}.
        show_alert: true




# ----------------------------------------------------------------------------------------------------
# Telegram bot command to reply with status of the freezer
# ----------------------------------------------------------------------------------------------------
- alias: 'Telegram bot command that informs the status of the freezer'
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/freezer"
  action:
    - service: notify.telegram
      data_template:
        message: "Freezer temperature: {{ states.sensor.freezer_internal_temperature.state_with_unit }} ({{ relative_time(states.sensor.freezer_internal_temperature.last_changed) }} ago)"



# ----------------------------------------------------------------------------------------------------
# Telegram bot command to reply with status of selected entities (either 'ok' or 'unavailable')
# ----------------------------------------------------------------------------------------------------
- alias: 'Telegram bot command to reply with status of selected entities'
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/status"
  action:
    - service: notify.telegram
      data_template:
        message: |-
          Current statuses:
          ------------------------
          {%- set sensor = 'sensor.problem_status' %}
          {%- for attr in states[sensor].attributes %}
          {%- if (attr != 'friendly_name') %}
          {{ attr }}: {{ states[sensor].attributes[attr] }}
          {%- endif %}
          {%- endfor %}


# ----------------------------------------------------------------------------------------------------
# Telegram bot command to reply with list of tempetarure values
# ----------------------------------------------------------------------------------------------------
- alias: 'Telegram bot command to reply with list of tempetarure values'
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/temp"
  action:
    - service: notify.telegram
      data_template:
        message: |-
          Current temperatures:
          ---------------------
          Freezer: {{ states.sensor.freezer_internal_temperature.state_with_unit }}
          Laundry room: {{ states.sensor.freezer_external_temperature.state_with_unit }}
          Living room: {{ states.sensor.balcony_02_temperature_bmp.state_with_unit }}
          Balcony: {{ states.sensor.balcony_temperature.state_with_unit }}


# ----------------------------------------------------------------------------------------------------
# Telegram bot command to toggle the fireplace light
# ----------------------------------------------------------------------------------------------------
- alias: 'Telegram bot command to toggle the fireplace light'
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/light"
  action:
    - service: switch.toggle
      target:
        entity_id: switch.fireplace_light_relay
    - delay:
        milliseconds: 100
    - service: notify.telegram
      data_template:
        message: "Fireplace light is: {{ states.switch.fireplace_light_relay.state }}."

