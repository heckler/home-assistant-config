
# ----------------------------------------------------------------------------------------------------
# Control Panel (/cp) inline keyboard 
# ----------------------------------------------------------------------------------------------------
- id: telegram-control-pannel-start
  alias: 'Telegram Control Pannel Command'
  initial_state: 'on'
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/cp'
  action:
  - service: notify.telegram
    data:
      message: Control Panel
      data:
        inline_keyboard:
          - "Temp:/temp, Freezer:/freezer, States:/states, Light:/light, Status:/status"


# ----------------------------------------------------------------------------------------------------
# System Menu (/system) inline keyboard 
# ----------------------------------------------------------------------------------------------------
- id: telegram-systme-meny-start
  alias: 'Telegram System Menu'
  initial_state: 'on'
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/system'
  action:
  - service: notify.telegram
    data:
      message: System Menu
      data:
        inline_keyboard:
          - "Status:/status, Host Restart:/restart"


# ----------------------------------------------------------------------------------------------------
# Telegram bot command to reply with status of the freezer
# ----------------------------------------------------------------------------------------------------
- alias: 'Telegram bot command that informs the status of the freezer'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/freezer"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/freezer"
  action:
    - service: notify.telegram
      data_template:
        message: "Freezer temperature: {{ states.sensor.freezer_internal_temperature.state_with_unit }} ({{ relative_time(states.sensor.freezer_internal_temperature.last_changed) }} ago)"



# ----------------------------------------------------------------------------------------------------
# Telegram bot command to reply with status of selected entities (either 'ok' or 'unavailable')
# ----------------------------------------------------------------------------------------------------
- alias: 'Telegram bot command to reply with status of selected entities'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/status"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/status"
  action:
    - service: notify.telegram
      data_template:
        message: |-
          ```
          +---------------------------+
          |     Current statuses:     |
          +---------------------------+
          {%- set sensor = 'sensor.problem_status' %}
          {%- for attr in states[sensor].attributes %}
          {%- if (attr != 'friendly_name') %}
          {{ attr }}: {{ states[sensor].attributes[attr] }}
          {%- endif %}
          {%- endfor %}
          -----------------------------```


# ----------------------------------------------------------------------------------------------------
# Telegram bot command to reply with the current state of several devices
# ----------------------------------------------------------------------------------------------------
- id: telegram-states-command
  alias: 'Telegram bot command to reply with the current state of several devices'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/states"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/states"
  action:
    - service: notify.telegram
      data_template:
        message: |-
          ```
          +-------------------+
          |  Current states:  |
          +-------------------+
          Fireplace light:  {{ states.switch.fireplace_light_relay.state }}
          Irrigation pump:  {{ states.switch.irrigation_pump_relay.state }}
          Wake-up light R:  {{ states.light.wakeup_light_01r.state }}
          Wake-up light G:  {{ states.light.wakeup_light_02g.state }}
          WLed Escritorio:  {{ states.light.wledescritorio.state }}
          WLed Rafael:      {{ states.light.wledrafael.state }}
          ---------------------
          ```
        data:
           inline_keyboard:
             - "FP:/toggle_fireplace, WKR:/toggle_wakeup_01R, WKG:/toggle_wakeup_02G, WLE:/toggle_wledescritorio, WLR:/toggle_wledrafael"



# ----------------------------------------------------------------------------------------------------
# Telegram bot command to toggle the Fireplace light
# ----------------------------------------------------------------------------------------------------
- id: toggle-fireplace-light-command
  alias: 'Telegram bot command to toggle the Fireplace light'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/toggle_fireplace_light"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/toggle_fireplace_light"
  action:
    - service: switch.toggle
      target:
        entity_id: switch.fireplace_light_relay
    - delay:
        milliseconds: 100
    - service: notify.telegram
      data_template:
        message: "Fireplace Light is: {{ states.switch.fireplace_light_relay.state }}."


# ----------------------------------------------------------------------------------------------------
# Telegram bot command to toggle the Wake-up Light 01R
# ----------------------------------------------------------------------------------------------------
- id: toggle-wakeup-01R-command
  alias: 'Telegram bot command to toggle the Wake-up Light 01R'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/toggle_wakeup_01R"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/toggle_wakeup_01R"
  action:
    - service: light.toggle
      target:
        entity_id: light.wakeup_light_01r
    - delay:
        milliseconds: 100
    - service: notify.telegram
      data_template:
        message: "Wake-up-Light 01R is: {{ states.light.wakeup_light_01r.state }}."


# ----------------------------------------------------------------------------------------------------
# Telegram bot command to toggle the Wake-up Light 02G
# ----------------------------------------------------------------------------------------------------
- id: toggle-wakeup-02G-command
  alias: 'Telegram bot command to toggle the Wake-up Light 02G'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/toggle_wakeup_02G"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/toggle_wakeup_02G"
  action:
    - service: light.toggle
      target:
        entity_id: light.wakeup_light_02g
    - delay:
        milliseconds: 100
    - service: notify.telegram
      data_template:
        message: "Wake-up-Light 02G is: {{ states.light.wakeup_light_02g.state }}."


# ----------------------------------------------------------------------------------------------------
# Telegram bot command to toggle the WLed-Escritorio
# ----------------------------------------------------------------------------------------------------
- id: toggle-wledescritorio-command
  alias: 'Telegram bot command to toggle the WLed-Escritorio'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/toggle_wledescritorio"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/toggle_wledescritorio"
  action:
    - service: light.toggle
      target:
        entity_id: light.wledescritorio
    - delay:
        milliseconds: 100
    - service: notify.telegram
      data_template:
        message: "WLed-Escritorio is: {{ states.light.wledescritorio.state }}."


# ----------------------------------------------------------------------------------------------------
# Telegram bot command to toggle the WLed-Rafael
# ----------------------------------------------------------------------------------------------------
- id: toggle-wledrafael-command
  alias: 'Telegram bot command to toggle the WLed-Rafael'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/toggle_wledrafael"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/toggle_wledrafael"
  action:
    - service: light.toggle
      target:
        entity_id: light.wledrafael
    - delay:
        milliseconds: 100
    - service: notify.telegram
      data_template:
        message: "WLed-Rafael is: {{ states.light.wledrafael.state }}."



# ----------------------------------------------------------------------------------------------------
# Telegram bot command to reply with list of tempetarure values
# ----------------------------------------------------------------------------------------------------
- alias: 'Telegram bot command to reply with list of tempetarure values'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/temp"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/temp"
  action:
    - service: notify.telegram
      data_template:
        message: |-
          ```
          Current temperatures:
          ---------------------
          Freezer:     {{ states.sensor.freezer_internal_temperature.state_with_unit }}
          Laundry room: {{ states.sensor.freezer_external_temperature.state_with_unit }}
          Living room:  {{ states.sensor.balcony_02_temperature_bmp.state_with_unit }}
          Balcony:      {{ states.sensor.balcony_temperature.state_with_unit }}
          ```



# ----------------------------------------------------------------------------------------------------
# Telegram bot command to force a restart of the host system
# ----------------------------------------------------------------------------------------------------
- alias: 'Telegram bot command to force a core restart'
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: "/restart"
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/restart"
  action:
    - service: notify.telegram
      data_template:
        message: "Restarting the Home Assistant host system ..."
    - service: hassio.host_reboot

