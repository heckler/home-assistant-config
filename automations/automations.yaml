
  # ----------------------------------------------------------------------------------------------------
  # Set the initial theme for some assistant
  # See here: https://www.home-assistant.io/integrations/frontend/#themes
  # ----------------------------------------------------------------------------------------------------

  - alias: Set theme at startup
    trigger:
     - platform: homeassistant
       event: start
    action:
      service: frontend.set_theme
      data:
        name: midnight

  # ----------------------------------------------------------------------------------------------------
  # Notification when there are HA updates available
  # ----------------------------------------------------------------------------------------------------

  - alias: Update Available Notification
    trigger:
      - platform: state
        entity_id: binary_sensor.updater
        from: 'off'
        to: 'on'
    action:
      - service: notify.notify
        data_template:
          message: "Home Assistant {{ state_attr('binary_sensor.updater', 'newest_version') }} is available."
      - service: notify.telegram
        data_template:
          message: "Home Assistant {{ state_attr('binary_sensor.updater', 'newest_version') }} is available."

  # ----------------------------------------------------------------------------------------------------
  # Notification for the startup event (power cycle?)
  # ----------------------------------------------------------------------------------------------------

  - alias: Notify on startup
    trigger:
     - platform: homeassistant
       event: start
    action:
      - service: notify.telegram
        data:
          message: 'Home assistant has started'


  # ----------------------------------------------------------------------------------------------------
  # Purge and repack the SQLite database every day at 2:30 in the morning
  # ----------------------------------------------------------------------------------------------------

  - alias: Purge Database
    initial_state: True
    trigger:
      platform: time
      at: '02:30:00'
    action:
      service: recorder.purge
      data:
        keep_days: 7
        repack: true


  # ----------------------------------------------------------------------------------------------------
  # Telegram bot command to reply with status of the freezer
  # ----------------------------------------------------------------------------------------------------
  - alias: 'Telegram bot command that informs the status of the freezer'
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: "/freezer"
    action:
      - service: notify.telegram
        data_template:
          message: "Freezer temperature: {{ states.sensor.freezer_internal_temperature.state_with_unit }} ({{ relative_time(states.sensor.freezer_internal_temperature.last_changed) }} ago)"



  # ----------------------------------------------------------------------------------------------------
  # Telegram bot command to reply with list of tempetarure values
  # ----------------------------------------------------------------------------------------------------
  - alias: 'Telegram bot command to reply with list of tempetarure values'
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: "/temp"
    action:
      - service: notify.telegram
        data_template:
          message: |-
            Current temperatures:
            ---------------------
            Freezer: {{ states.sensor.freezer_internal_temperature.state_with_unit }}
            Laundry room: {{ states.sensor.freezer_external_temperature.state_with_unit }}
            Living room: {{ states.sensor.balcony_02_temperature_bmp.state_with_unit }}
            Balcony: {{ states.sensor.balcony_temperature.state_with_unit }}

